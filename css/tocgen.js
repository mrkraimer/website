/*===============================================================
tocgen.js defines a Table of Contents generator for HTML markup.
 
This has been shamelessly purloined from a public 
blog [1] and all quodos and prizes should go to that author.

Minor changes from  to the script found at [1]: 
   i) .* was added to the regex that matches h tags, so it matches 
      not just say <h2> but also <h2 class="nocount"> etc, as we use in epics v4.
  ii) anchor names are constructed in lower case, so a person can guess the
      name without case mistakes getting in their way.  

Usage:

* Include this script in your <head> section, eg
  <script type="text/javascript" src="script/tocgen.js"></script>
* Put the following where you want the Table of Contents to appear:
  <div id="toc">
    <h2 class="nocount">Table of Contents</h2>
  </div>
* Put your contents - everything you want in the TOC, inside a div with id "contents"
  and class="contents". 
  <div id="contents" class="contents">
    ...
  </div>
* Optional, include the epicsv4.css stylesheet for toc markup, eg
 <link rel="stylesheet" type="text/css"   href="../../epicsv4.css" />

  NOTE 1. that everything inside the div contents will be simply numbered in the TOC
  as a result of the TOC being a <ol>, so if you additionally use the class="nocount" 
  from epicsv4.css to stop it numbering Abstract and Status of This Document sections etc,
  then those two systems have to agree. Basically, everything outside (eg before) 
  <div id="contents"> should have class="nocount" and everything inside div contents
  should not have class="nocount". 

  NOTE 2: If you use tocgen, all your heading tags (h2, h3 etc) get regenerated by
  the browser during execution of the toc.  So if you use your own ids, they
  won't work! Instead, use the generated anchor names. The generated anchor names are
  the titles, with spaces replaced by _, and all lowercase. Eg, the anchor for a h2
  section titled "Description of Normative Types" will be
  #description_of_normative_types. Any other name or anchor that was in the original
  source, like <h2 id="descrip"> will be overwritten by the script, so #descrip won't
  work.

  NOTE 3: <div id="contents" has also class="contents"> to work with epicsv4.css div
  class contents, to work around bug in Chrome where it doesn't do css for class
  ="nocount".

  See the Normative Types doc for an example [2]
   
Ref: [1] http://blog.magnetiq.com/post/497600148/automatic-table-of-contents-generation
     [2] http://epics-pvdata.sourceforge.net/alpha/normativeTypes/normativeTypes.html
==================================================================
Auth: Stolen and adapted by Greg White, 11-Apr-2012.
Mod: 11-Apr-2012, Greg White. Added to usage that should make div with class="contents"
================================================================*/

window.onload = function () {
        var toc = "";
        var level = 0;

	document.getElementById("contents").innerHTML =
		document.getElementById("contents").innerHTML.replace(
			/<h([23]).*>([^<]+)<\/h([\d])>/gi,
			function (str, openLevel, titleText, closeLevel) {
				if (openLevel != closeLevel) {
					return str;
				}

				if (openLevel > level) {
					toc += (new Array(openLevel - level + 1))
                                               .join("<ol>");
				} else if (openLevel < level) {
					toc += (new Array(level - openLevel + 1))
                                               .join("</ol>");
				}

				level = parseInt(openLevel);

				var anchor = titleText.replace(/ /g, "_").toLowerCase();
				toc += "<li><a href='#" + anchor + "'>"
                                       + titleText + "</a></li>";

				return "<h" + openLevel + " id='" + anchor
                                       + "'>" + titleText + "</h" + closeLevel
                                       + ">";
			}
		);

	if (level) {
		toc += (new Array(level + 1)).join("</ol>");
	}

	document.getElementById("toc").innerHTML += toc;
};

